SpringMVC：是基于spring的框架，实际上就是spring的一个模块，专门是做web开发的。
            理解是servlet的一个升级

            web开发底层是servlet，框架是在servlet基础上加入一些功能，使得web开发更方便。

SpringMVC就是一个spring。Spring是容器，，ioc能够管理对象，使用<bean>，@Component，@Repository，@Service，@Controller
    SpringMVC能够创建对象，放入到容器中（SpringMVC容器），springmvc容器中放的是控制器对象。

    我们要做的是 使用@Controller创建控制器对象，把对象放入到springmvc容器中，把创建的对象作为控制器使用
    这个控制器对象能接受用户的请求，显示处理结果，就当作一个servlet来用。

    使用@Controller注解创建的是一个普通类的对象，不是Servlet。springmvc赋予了控制器对象一些额外的功能。

    web开发底层是serlvlet，springmvc中有一个对象是servlet：DispatcherServlet
    DispatcherServlet：负责接收用户的所有请求，用户把请求给了DispatcherServlet，之后DispatcherServlet把请求
                        转发给Controller对象，最后是Controller对象处理请求

    index.jsp-------DispatcherServlet(Servlet)----转发，分配-----Controller对象（@Controller注解创建的对象）

-------------------------------------------------------------------------------------------------------------------
springmvc请求的处理流程

  1）发起some.do
  2）tomcat（web.xml--url-pattern知道*.do的请求给DispatcherServlet）
  3）DispatcherServlet（根据springmvc.xml配置知道some.do---doSome()）
  4）DispatcherServlet把some.do转发给MyController.doSome()方法
  5）框架执行doSome()把得到ModelAndView进行处理，转发到show.jsp



=========================================================================================
发起请求是由哪些程序处理的？
http://localhost:8080/ch05_url_pattern/：tomcat（jsp转为servlet）
http://localhost:8080/ch05_url_pattern/images/p1.JPG：tomcat
http://localhost:8080/ch05_url_pattern/html/test.html：tomcat
http://localhost:8080/ch05_url_pattern/some.do：DisPatcherServlet（springmvc框架处理）

tomcat本身能处理静态资源文件的访问

default--servlet
1、处理静态资源
2、处理未映射到其他servlet的请求

==========================================================================================
在jsp，html中使用的地址，都是在前端页面中的地址，都是相对地址

地址分类：
    1、绝对地址，带有协议名称的是绝对地址，http://www.baidu.com
    2、相对地址：没有协议开头的，例如 user/some.do, /user/some.do
                相对地址不能独立使用，必须有一个参考地址。通过参考地址+相对地址本身才能指定资源
    3、参考地址
        1)在你的页面中，访问地址不加"/"
            访问的是：http://localhost:8080/ch06_path/index.jsp
            路径：http://localhost:8080/ch06_path/
            资源：index.jsp

            在index.jsp发起user/some.do请求，访问地址变为http://localhost:8080/ch06_path/user/some.do
            当你的地址没有斜杠开头，例如user/some.do，当你点击链接时，访问地址是当前页面是当前页面的地址，加上链接的地址
            http://localhost:8080/ch06_path/ + user/some.do
            --------------------------------------------------------------------------
            index.jsp 访问 user/some.do 返回后现在的地址： http://localhost:8080/ch06_path/user/some.do
            再点击 http://localhost:8080/ch06_path/user/user/some.do 出错

            解决方案：
                1、加入${pageContext.request.contextPath}
                2、加入一个base标签，是html中的语言。表示当前页面中访问地址的基地址
        2)在你的页面中，访问加"/"
            访问的是：http://localhost:8080/ch06_path/index.jsp
            路径：http://localhost:8080/ch06_path/
            资源：index.jsp

            在index.jsp发起user/some.do请求，访问地址变为http://localhost:8080/user/some.do
            参考地址是服务器地址 http://localhost:8080


====================================================
异常处理：
springmvc框架使用的是统一的，全局的异常处理。
把controller中的所有异常处理都集中到一个地方。采用的是aop的思想。把业务逻辑和异常处理代码分开。接耦合。

使用两个注解：
1、@ExceptionHandler
2、@ControllerAdvice


拦截器：
1）拦截器是springmvc的一种，需要实现HandlerInterceptor接口。
2）拦截器和过滤器类似，功能方向侧重点不同。过滤器是用来过滤请求参数，设置编码字符集等工作。
    拦截器是拦截用户的请求，对请求判断处理
3）拦截器是全局的，可以对多个Controller做拦截。
    一个项目中可以有0个或多个拦截器，他们一起拦截用户的请求。
    拦截器常用在：用户登录处理，权限检查，记录日志。

拦截器的使用步骤：
    1、定义类实现HandlerInterceptor接口
    2、在springmvc配置文件中，声明拦截器，让框架知道拦截器的存在。

拦截器的执行时间：
    1）在请求处理之前，也就是controller类中的方法执行之前先被拦截。
    2）在控制器方法执行之后也会执行拦截器。
    3）在请求处理完成后也会执行拦截器。

拦截器：看作是多个controller公共的功能，集中到拦截器统一处理，使用aop的思想

=====================================================================
多个拦截器
第一个拦截器返回true，第二个拦截器返回true
11111拦截器的预处理方法
22222拦截器的预处理方法
2222拦截器的后处理方法
11111拦截器的后处理方法
2222拦截器的后处理方法afterCompletion
1111拦截器的后处理方法afterCompletion

第一个拦截器返回true，第二个拦截器返回false
11111拦截器的预处理方法
22222拦截器的预处理方法
1111拦截器的后处理方法afterCompletion

第一个拦截器返回false，第二个拦截器返回true
11111拦截器的预处理方法

===================================================================================
拦截器和过滤器的区别
1、过滤器是servlet中的对象，拦截器是框架中的对象
2、过滤器实现filter接口的对象，拦截器是实现HandlerInterceptor
3、过滤器是用来设置request，response的参数，属性的，侧重于对数据过滤的。
    拦截器是用来验证请求的，能截断请求。
4、过滤器是在拦截器之前执行的。
5、过滤器是tomcat服务器创建的对象
    拦截器是springmvc容器创建的对象
6、过滤器有一个执行时间点
    拦截器有三个执行时间点
7、过滤器可以处理jsp，js，html等
    拦截器是侧重于拦截对Controller的对象，如果你的请求不能被DispatcherServlet接收，这个请求不会执行拦截器
========================================================================================
springmvc内部请求的处理流程：也就是springmvc接收请求，到处理完成的过程
1、用户发起请求some.do
2、DispatcherServlet接收请求some.do，把请求转交给处理器映射器
    处理器映射器：springmvc框架的一个对象，框架实现了HandlerMapping接口的类都叫做映射器

    处理器映射器作用：根据请求，把springmvc容器对象获取处理器对象（MyController controller = ctx.getBean(some.do)
                    框架把找到的处理器对象放到一个叫做处理器执行链（HandlerExecutionChain）的类保存
    HandlerExecutionChain：类中保存着     1、处理器对象(Mycontroller)    2、项目中的所有拦截器List<HandlerInterceptor>

3、DispatcherServlet把2中的HandlerExecutionChain中的处理器对象交给了处理器适配器对象（多个）
    处理器适配器：springmvc框架中的对象，需要实现HandlerAdapter方法
    作用：执行处理器方法（调用myController.doSome()得到返回值ModelAndView

4、DispatcherServlet把3中的获取的ModelAndView交给了视图解析器对象。
    视图解析器：springmvc中的对象，需要实现ViewResolver接口。
    视图解析器作用：组成视图完整路径，使用前缀，后缀，并创建View对象。
        View是一个接口，表示视图的，在框架中jsp，html不是string表示，而是使用View和他的实现类表示。

        InternalResourceView：视图类，表示就是jsp文件，视图解析器会创建InternalResourceView对象
        这个类中有一个属性就是url=/WEB-INF/view/show.jsp
5、DispatcherServlet把4步骤中创建的View对象获取到，调用View类自己的方法，把Model数据放入到request作用域，
执行对象视图的forward。请求结束。