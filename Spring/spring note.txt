spring 全家桶：spring, springmvc, spring boot, spring cloud

    spring：出现在2002左右，解决企业开发难度。减轻对项目模块之间的管理，类和类之间的管理，
    帮助开发人员创建对象，管理对象之间的关系。spring核心技术 ioc，aop。能实现模块之间，类之间的接耦合。

    依赖：classA中使用classB的属性或者方法，叫做classA依赖classB

---------------------------------------------------------------------------------------------

how to learn framework: 框架是一个软件，其他人写好的软件
1）知道框架能做什么，mybatis--访问数据库，对表中的数据进行增删改查
2）框架的语法，框架要完成一个功能是需要一定的步骤支持的，
3）框架的内部实现，框架的内部怎么做，原理是什么。
4）通过学习，可以实现一个框架。

spring的第一个核心工能：IOC --- Inversion of Control

IOC：控制反转，是一个理论。
    描述的：把对象的创建，赋值，管理工作都交给代码之外的容器实现，也就是对象的创建室友其他的外部资源完成的

Control：创建对象，对象的属性赋值，对象之间的关系管理。
Inversion：把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。有容器代替开发人员管理对象，创建对象，给属性赋值。

Container：是一个服务器软件，一个框架（spring）

为什么要使用IOC：目的是减少对代码的改动，也能实现不同的功能。

java中创建对象有哪些方式：
    1.构造方法，new Student()
    2.反射
    3.序列化
    4.克隆
    5.ioc:容器创造对象
    6.动态代理

ioc的体现：
    servlet
    1：创建类继承HttpServlet
    2：在web.xml注册servlet， 使用<servlet-name> myservlet </servlet-name>
                                <servlet-class>......</servlet-class>
    3：没有创建servlet对象
    4：Servlet是Tomcat服务器创建的。Tomcat也称为容器。
    Tomcat作为容器，里面存放的有Servlet对象，Listener，Filter对象

IoC的技术实现
  DI是ioc的技术实现
  DI--Dependency Injection：依赖注入，只需要在程序中提供要使用的对象的名称，至于对象如何在容器中创建，
                            赋值，查找，都由容器内部实现

spring是使用的DI实现的Ioc的功能，spring底层创建对象，使用的是反射机制。

spring是一个容器，管理对象，给属性赋值，底层是反射创建对象。

spring-context 和 spring-webmvc是spring中的两个模块

spring-context：是ioc功能的，创建对象的。
spring-webmvc做web开发使用的，是servlet的升级。
spring-webmvc也会用到spring-context中创建对象的功能。

junit：单元测试，一个工具类库，做测试方法用的
    单元：指定的是方法，一个类中有很多方法，一个方法有很多单元。

    使用单元测试：
      1、加入junit依赖
      2、创建测试作用的类：叫做测试类
       src/test/java目录中创建类
      3、创建测试方法
       1）public方法
       2）没有返回值void
       3）方法名称没有自定义，建议名称是test + 你要测试的方法名称
       4）方法没有参数
       5）方法上面加入@Test，这样的方法是可以单独执行的，不用使用main方法

------------------------------------------------------------------------

1、多个配置文件优势
    1）每个文件的大小比一个文件要小很多，效率高
    2）避免多人竞争带来的冲突

    多文件的分配方式：
    1）按功能模块，一个模块一个配置文件
    2）按类的功能，数据库相关的配置一个配置文件，做事务功能的一个配置文件，做service功能的一个配置文件

2、基于注解的di：通过注释完成java对象创建，属性赋值。
    使用注解的步骤：
     1、加入maven的依赖，在你加入spring-context的同时，间接加入spring-aop的依赖。
        使用注解必须使用spring-aop依赖
     2、在类中加入spring的注解
     3、在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置

     学习的注解：
      1.@Component
      2.@Respotory
      3.@Service
      4.@Controller
      5.@Value
      6.@Autowired
      7.@Resource

====================================================================================
第三章 AOP

1、动态代理
   实现方式：jdk动态代理，使用jdk中的Porxy，Method，InvocationHandler创建代理对象。
            jdk动态代理要求目标类必须实现接口
   cglib动态代理：第三方的工具库，创建代理对象，原理是继承。通过继承目标类，创建子类。
                子类就是代理对象。要求目标类不能是final的，方法也不能是final的。

2、动态代理的作用：
    1）在目标类源代码不改变的情况下，增加功能。
    2）减少代码的重复
    3）专注业务逻辑代码
    4）解耦合，让你的业务功能和日志，事务非业务功能分离

3、AOP：面向切面编程，基于动态代理的，可以使用jdk，cglib两种代理方式。
    AOP就是动态代理的规范化，把动态代理的实现步骤，方式都定义好了，
    让开发人员用一种统一的方式，使用动态代理。

4、AOP(Aspect Orient Programming)
    Aspect：切面，给你的目标类增加的功能，就是切面。像事务，日志都是切面。
            切面的特点：一般都是非业务方法，独立使用的。

    怎么面向切面编程？
    1）需要在分析项目功能时，找出切面。
    2）合理的安排切面的执行时间（在目标方法前，还是目标方法后）
    3）合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能

    术语：
    1）Aspect：切面，表示增强的功能。非业务功能，
        常见的切面功能，日志，事务，统计信息，参数检查，权限验证。
    2）JoinPoint：连接点，连接业务方法和切面的位置，就是某类中的业务方法
    3）Pointcut：切入点，指多个连接点方法的集合
    4）目标对象：给哪个类的方法增加功能，这个类就是目标对象。
    5）Advice：通知，通知表示切面功能执行的时间。

    说一个切面有三个关键的要素：
    1）切面的功能代码，切面干什么
    2）切面的执行位置，使用Pointcut表示切面执行的位置
    3）切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后。

5.AOP的实现
    AOP是一个规范，是对动态代理的一个规范化，一个标准
    AOP的技术实现框架：
    1、spring在内部实现了aop规范。
        spring主要在事务处理时使用aop。
        项目开发中很少使用spring的aop实现。因为spring的aop比较笨重。

    2、aspectJ：一个开源的专门做aop的框架。spring框架中集成了aspectJ框架，通过spring就能使用aspectJ的功能。
        aspectJ框架实现aop有两种方式：
            1、使用xml配置文件
            2、使用注解，我们在项目中要做aop功能，一般都使用注解，aspectJ有5个注解。

6.学习aspectJ框架的使用
    1）切面的执行时间，这个执行时间在规范中叫做Advice
       在aspectJ框架中使用注解表示的。也可以用xml配置文件中的标签
       （1）@Before
       （2）@AfterReturning
       （3）@Around
       （4）@AfterThrowing
       （5）@After
    2）表示切面执行的位置，使用的是切入点表达式


======================================================================
第四章：把mybatis框架和spring集成在一起，向一个框架一样使用

用的技术是：ioc
为什么ioc能把mybatis和spring继承在一起呢，是因为ioc能创建对象。
    可以把mybatis创建的对象交给spring统一创建，开发人员统一在spring中获取对象。
    开发人员就不用同时面对两个或多个框架了，就面对一个spring。

mybatis使用步骤：
1、定义dao接口，StudentDao
2、定义mapper文件 StudentDao.xml
3、定义mybatis的主配置文件 mybatis.xml
4、创建Dao的代理对象 StudentDao dao = SqlSession.getMapper(StudentDao.class)
    List<Student> students = dao.selectStudent();

要使用dao对象，需要使用getMapper()方法
怎么使用getMapper()方法，需要哪些条件
1、获取SqlSession对象，需要使用SqlSessionFactory的openSession()方法
2、创建SqlSessionFactory对象。通过读取mybatis的主配置文件，能创建SqlSessionFactory对象。

我们会使用一个独立的连接池类替换mybatis默认自带的，把连接池类也交给spring来创建

===================================================================================
通过以上的说明，我们需要让spring创建以下对象
1、独立的连接池类的对象，使用阿里的druid连接池
2、SqlSessionFactory对象
3、创建出dao对象

需要学习就是上面三个对象的创建语法，使用xml的bean标签



=====================================================================================
spring的事务问题
1、什么是事务
    讲mybatis的时候，提出了事务，事务是指一组sql语句的集合，集合中有多条sql语句
    可能是insert，update，select，delete，希望这些sql都可以成功或者都失败，
    这些sql语句执行是一致的，作为一个整体执行
2、在什么时候用到事务
    当我的操作涉及到多个表，或者是多个sql语句的insert，update，delete。
    需要保证这些语句都是成功才能完成我的功能，或者都失败来保证操作符合要求的

    在java代码中写程序，控制事务，此时事务应该放在哪里呢？
        service类的业务方法上，因为业务方法会调用多个sql执行语句
3、通常使用JDBC访问数据库，还是mybatis访问数据库怎么处理事务
    jdbc访问数据库，处理事务，connection conn; conn.commit(); conn.rollback();
    mybatis访问数据库，处理事务，SqlSession.commit(); SqlSession.rollback();
    hibernate访问数据库，处理事务，Session.commit(); Session.rollback();

4、事务的处理方式，有什么不足
    1）不同的数据库访问技术，处理事务的对象、方法不同，
        需要了解不同数据库访问技术使用事务的原理
    2）掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回滚事务
    3）处理事务的多种方法

    总结：多种数据库访问技术，有不同的事务处理的机制，对象，方法。
5、怎么解决不足？
    spring提供了一种处理事务的统一模型，能使用统一的方式完成多重不同数据库访问技术的事务处理。

    使用spring的事务处理机制，可以完成mybatis访问数据库的事务处理
    使用spring的事务处理机制，可以完成hibernate访问数据库的事务处理
6、处理事务，需要怎么做？
    spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring就可以了
    1）spring内部提交，回滚事务，使用的是管理器对象，代替你完成commit，rollback
        事务管理器是一个接口和他的一堆实现类。
        接口：PlatformTransactionManager，定义了事务的重要方法commit，rollback
        实现类：spring把每一种数据库访问技术对应的事务处理类都创建好了。
                mybatis访问数据库---spring创建好的是DataSourceTransactionManager
                hibernate访问数据库---spring创建的是HibernateTransactionManager

        怎么使用：需要告诉spring用的是哪种数据库的访问技术，如何通知spring？
        声明数据库访问技术对于事务管理器实现类，在spring的配置文件中使用<bean>声明

    2）业务方法需要什么事务，说明需要事务的类型。
    说明方法需要的事务：
        1）事务的隔离级别：有四个值
        DEFAULT：采用DB默认的事务隔离级别。MySql的默认为REPREATABLE_READ：Oracle默认为READ_COMMITED.

        2）事务的超时时间：表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就回滚
            单位是秒，整数值，默认是-1

        3）事务的传播行为：控制业务方法是不是有事务的，是什么样的事务的。
            7个传播行为，表示你的业务方法调用时，事务在方法之间是如何使用的。
            PROPAGATION_REQUIRED
            PROPAGATION_REQUIRES_NEW
            PROPAGATION_SUPPORT

            PROPAGATION_MANDATORY
            PROPAGATION_NESTED
            PROPAGATION_NEVER
            PROPAGATION_NOT_SUPPORTED
    3)事务提交事务，回滚事务的时机
        1）当你的业务方法执行成功，没有异常跑出，当方法执行完毕，spring在方法执行后提交事务。
        2）当你的业务方法抛出运行时异常，spring执行回滚，调用事务管理器的rollback
            运行时异常的定义是：RunTimeException和他的子类都是运行时异常
        3）当业务方法抛出非运行时异常，主要是受查异常时，提交事务
            受查异常：在写代码时，必须处理的异常。例如IOException，SQLException

总结spring的事务：
    1、管理事务的是 事务管理和他的实现类
    2、spring的事务是一个统一模型
        1）指定要使用的事务管理器实现类，使用<bean>
        2）指定那些类，哪些方法需要加入事务的功能
        3）指定方法需要的隔离级别，传播行为，超时

        告诉spring，项目中类信息，方法民称，方法的事务传播行为。

spring框架中提供的事务处理方案
1、适合中小项目使用的，注解方案
    spring框架自己用aop实现给业务方法增加事务的功能，使用@Transactional注解增加事务
    @Transactional注解是spring框架自己的注解，放在public方法的上面，表示当前方法具有事务。
    可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等。

    使用@Transactional的步骤：
    1、需要声明事务管理器对象
        <bean id="xxx" class="DataSourceTransactionManager">

    2、开启事务注解驱动，告诉spring框架，使用注解的方式管理事务。
    spring使用aop机制，创建@Transactional所在类代理对象，给方法加入事务的功能。
    spring给业务方法加入事务：
        在业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知

        @Around
        Obejct myAround(){
            try{
                buy(100,10);
                事务管理.commit();
            } catch(){
                rollback();
            }
        }

    3、在方法上面加入@Transactional注解

2、适合大型项目，有很多的类，方法，需要大量的事务，使用aspectJ框架功能，在spring配置文件中
声明类，方法需要事务。这种方式业务方法和事务配置完全分离。

    实现步骤：都是在xml配置文件中实现。
    1）要使用的是aspectJ框架，需要加入依赖
    2）声明事务管理器对象
    3）声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）
    4）配置aop，指定哪些类要创建代理。
====================================================================================
第六章：web项目中怎么使用容器对象

1、做的是javase项目有main方法的，执行代码是执行main方法的。
在main里面创建的容器对象

2、web项目是在tomcat服务器上运行的。tomcat启动，项目一直运行

需求：
web项目中容器对象只需要创建一次，把容器对象放入到全局作用域ServletContext中。

怎么实现？
    使用监听器 当全局作用域对象被创建时， 创建容器 存入ServletContext

    监听器作用：
        1）创建容器对象
        2）把容器对象放入到ServeletContext
















